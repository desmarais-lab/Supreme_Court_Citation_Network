#PBS -l nodes=1:ppn=1
#PBS -l walltime=24:00:00
#PBS -m abe
#PBS -M schmid@psu.edu
#PBS -l mem=128GB
#PBS -j oe


cd /storage/work/cxs5700/SCC_paper/MPLE

echo " "
echo " "
echo "Job started on `hostname` at `date`"

module load R/3.2.0

R --vanilla <<STOP > scc_bootmple_full.out

# get data
mpledata<- read.csv("mpledata_all.csv")

#install.packages("statnet", Sys.getenv("R_LIBS_USER"), repos = "http://cran.case.edu" )
#library(statnet)

# set seed
set.seed(333)

#subset Warren era #
data.b <- list()
for(k in 382:818){ #
  data.b[[k-381]] <- subset(mpledata,mpledata[,12]==k)
}

# collapse into a matrix
data.b <- do.call('rbind',data.b)
# convert to data frame
mple.warren<-  data.frame(data.b)

mple.est <- glm(edgeij ~ istar2+ostar2+mutual+triangle+ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t,family=binomial,data=mple.warren)
summary(mple.est)



# nonparametric bootstrap resampling
nboot <- 500 # this number should be 200 or higher
ncoef <- length(coef(mple.est))
boot.results <- matrix(NA,nboot,ncoef)
# need to weight by the number of potential edges in a time period
n.per.time <- table(mple.warren[,12])   #
# get unique sender times, over which to weight
unique.sender.times <- as.numeric(names(n.per.time))
# calculate weights for weighted resampling of times
time.weights <- n.per.time/sum(n.per.time)

# loop over bootstrap iterations (easily paralellize)
for(b in 1:nboot){
  print(b)
  # sample time periods with replacement
  time.periods.b <- sample(unique.sender.times,length(unique.sender.times),prob=time.weights,rep=T)
  # construct the data for iteration b
  data.b <- list()
 for(k in 1:length(time.periods.b)){
    t<- time.periods.b[k]
    data.b[[k]] <- subset(mple.warren,mple.warren[,12]==t) #
  }
  # collapse into a matrix
  data.b <- do.call('rbind',data.b)
  # convert to data frame
  data.b <- data.frame(data.b)
  # run mple
  mple.est.b <- glm(edgeij ~ istar2+ostar2+mutual+triangle+ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t,family=binomial,data=data.b)
  # store results
  boot.results[b,] <- coef(mple.est.b)
}

write.csv(boot.results, file = "bootresults_warren.csv")

### take percentiles
quantile(boot.results[,1], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,2], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,3], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,4], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,5], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,6], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,7], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,8], probs=c(0.975, 0.025), na.rm = TRUE)


STOP
echo " "
echo "Job Ended at `date`"
echo " "
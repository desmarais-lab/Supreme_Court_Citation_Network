
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # get data
> mpledata<- read.csv("mpledata_all.csv")
> 
> #install.packages("statnet", Sys.getenv("R_LIBS_USER"), repos = "http://cran.case.edu" )
> #library(statnet)
> 
> colnames(mpledata)[12]
[1] "edgecov.sender.time.t"
> 
> # set seed
> set.seed(333)
> 
> #subset Vinson era
> data.b <- list()
> for(k in 214:381){
+   data.b[[k-213]] <- subset(mpledata,mpledata[,12]==k)
+ }
> 
> # collapse into a matrix
> data.b <- do.call('rbind',data.b)
> # convert to data frame
> mple.vinson<-  data.frame(data.b)
> 
> mple.est <- glm(edgeij ~ istar2+ostar2+mutual+triangle+ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t +I(edgecov.year.diff.t^2) +
+                 nodeicov.AbsDiffMQscores+ nodeicov.NumberJusticesPro + nodeocov.sender.time+ nodeifactor.SameIssueArea.2+ nodeifactor.SameIssueArea.3+ 
+                 nodeifactor.SameIssueArea.4+nodeifactor.SameIssueArea.5+ nodeifactor.SameIssueArea.6+ nodeifactor.SameIssueArea.7+ 
+                 nodeifactor.SameIssueArea.8+nodeifactor.SameIssueArea.9+  nodeifactor.SameIssueArea.10+
+                 nodeifactor.SameIssueArea.11+ nodeifactor.SameIssueArea.12+ nodeifactor.SameIssueArea.13+nodeifactor.SameIssueArea.14+ 
+                 nodeofactor.SameIssueArea.2+ nodeofactor.SameIssueArea.3+ nodeofactor.SameIssueArea.4+nodeofactor.SameIssueArea.5+ 
+                 nodeofactor.SameIssueArea.6+nodeofactor.SameIssueArea.7+
+                 nodeofactor.SameIssueArea.8+nodeofactor.SameIssueArea.9+nodeofactor.SameIssueArea.10+ nodeofactor.SameIssueArea.11+ 
+                 nodeofactor.SameIssueArea.12+ nodeofactor.SameIssueArea.13+nodeofactor.SameIssueArea.14,family=binomial,data=mple.vinson)
> summary(mple.est)

Call:
glm(formula = edgeij ~ istar2 + ostar2 + mutual + triangle + 
    edgecov.mq.t + edgecov.same.issue.area.t + edgecov.year.diff.t + 
    I(edgecov.year.diff.t^2) + nodeicov.AbsDiffMQscores + nodeicov.NumberJusticesPro + 
    nodeocov.sender.time + nodeifactor.SameIssueArea.2 + nodeifactor.SameIssueArea.3 + 
    nodeifactor.SameIssueArea.4 + nodeifactor.SameIssueArea.5 + 
    nodeifactor.SameIssueArea.6 + nodeifactor.SameIssueArea.7 + 
    nodeifactor.SameIssueArea.8 + nodeifactor.SameIssueArea.9 + 
    nodeifactor.SameIssueArea.10 + nodeifactor.SameIssueArea.11 + 
    nodeifactor.SameIssueArea.12 + nodeifactor.SameIssueArea.13 + 
    nodeifactor.SameIssueArea.14 + nodeofactor.SameIssueArea.2 + 
    nodeofactor.SameIssueArea.3 + nodeofactor.SameIssueArea.4 + 
    nodeofactor.SameIssueArea.5 + nodeofactor.SameIssueArea.6 + 
    nodeofactor.SameIssueArea.7 + nodeofactor.SameIssueArea.8 + 
    nodeofactor.SameIssueArea.9 + nodeofactor.SameIssueArea.10 + 
    nodeofactor.SameIssueArea.11 + nodeofactor.SameIssueArea.12 + 
    nodeofactor.SameIssueArea.13 + nodeofactor.SameIssueArea.14, 
    family = binomial, data = mple.vinson)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-7.0724  -0.1108  -0.0871  -0.0709   3.6533  

Coefficients: (1 not defined because of singularities)
                               Estimate Std. Error z value Pr(>|z|)    
(Intercept)                  -3.992e+00  1.847e-01 -21.610  < 2e-16 ***
istar2                        2.455e-03  2.103e-04  11.673  < 2e-16 ***
ostar2                        1.223e-03  6.983e-05  17.514  < 2e-16 ***
mutual                        3.414e-01  2.944e-02  11.598  < 2e-16 ***
triangle                      1.021e-01  1.125e-03  90.757  < 2e-16 ***
edgecov.mq.t                  1.927e-03  2.445e-03   0.788 0.430477    
edgecov.same.issue.area.t     1.017e-01  2.886e-03  35.241  < 2e-16 ***
edgecov.year.diff.t          -1.001e-02  1.084e-03  -9.237  < 2e-16 ***
I(edgecov.year.diff.t^2)      2.552e-05  4.967e-06   5.138 2.78e-07 ***
nodeicov.AbsDiffMQscores     -6.825e-03  1.710e-02  -0.399 0.689726    
nodeicov.NumberJusticesPro   -3.586e-02  1.502e-02  -2.387 0.016980 *  
nodeocov.sender.time         -2.876e-03  5.764e-04  -4.990 6.04e-07 ***
nodeifactor.SameIssueArea.2   7.830e-02  7.881e-02   0.993 0.320469    
nodeifactor.SameIssueArea.3  -7.836e-01  1.128e-01  -6.946 3.77e-12 ***
nodeifactor.SameIssueArea.4   2.121e-01  1.021e-01   2.077 0.037797 *  
nodeifactor.SameIssueArea.5  -7.754e-01  7.121e-01  -1.089 0.276190    
nodeifactor.SameIssueArea.6  -5.991e-01  3.600e-01  -1.664 0.096109 .  
nodeifactor.SameIssueArea.7  -1.457e-01  8.292e-02  -1.757 0.078920 .  
nodeifactor.SameIssueArea.8  -4.160e-01  6.254e-02  -6.652 2.89e-11 ***
nodeifactor.SameIssueArea.9  -1.725e-01  6.877e-02  -2.509 0.012112 *  
nodeifactor.SameIssueArea.10  2.488e-03  1.037e-01   0.024 0.980864    
nodeifactor.SameIssueArea.11 -6.397e-01  2.532e-01  -2.527 0.011500 *  
nodeifactor.SameIssueArea.12 -6.527e-01  9.000e-02  -7.252 4.10e-13 ***
nodeifactor.SameIssueArea.13 -2.277e-01  5.047e-01  -0.451 0.651881    
nodeifactor.SameIssueArea.14 -5.595e-02  1.729e-01  -0.324 0.746233    
nodeofactor.SameIssueArea.2   1.324e-01  8.024e-02   1.650 0.099035 .  
nodeofactor.SameIssueArea.3  -2.569e-01  9.306e-02  -2.761 0.005763 ** 
nodeofactor.SameIssueArea.4   4.298e-01  8.787e-02   4.892 9.98e-07 ***
nodeofactor.SameIssueArea.5  -3.513e-02  3.629e-01  -0.097 0.922877    
nodeofactor.SameIssueArea.6  -5.007e-01  7.099e-01  -0.705 0.480639    
nodeofactor.SameIssueArea.7   1.307e-02  9.563e-02   0.137 0.891258    
nodeofactor.SameIssueArea.8  -2.296e-01  6.240e-02  -3.679 0.000234 ***
nodeofactor.SameIssueArea.9   1.895e-01  6.598e-02   2.872 0.004080 ** 
nodeofactor.SameIssueArea.10  3.436e-01  9.634e-02   3.566 0.000362 ***
nodeofactor.SameIssueArea.11  4.887e-01  1.392e-01   3.512 0.000445 ***
nodeofactor.SameIssueArea.12  8.762e-02  9.447e-02   0.927 0.353673    
nodeofactor.SameIssueArea.13  1.368e+00  3.444e-01   3.973 7.09e-05 ***
nodeofactor.SameIssueArea.14         NA         NA      NA       NA    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 56369  on 449420  degrees of freedom
Residual deviance: 33822  on 449384  degrees of freedom
AIC: 33896

Number of Fisher Scoring iterations: 8

> 
> 
> 
> # nonparametric bootstrap resampling
> nboot <- 500 # this number should be 200 or higher
> ncoef <- length(coef(mple.est))
> boot.results <- matrix(NA,nboot,ncoef)
> # need to weight by the number of potential edges in a time period
> n.per.time <- table(mple.vinson[,12])   #
> # get unique sender times, over which to weight
> unique.sender.times <- as.numeric(names(n.per.time))
> # calculate weights for weighted resampling of times
> # time.weights <- n.per.time/sum(n.per.time)
> 
> # loop over bootstrap iterations (easily paralellize)
> for(b in 1:nboot){
+   print(b)
+   # sample time periods with replacement
+   time.periods.b <- sample(unique.sender.times,length(unique.sender.times),rep=T)
+   # construct the data for iteration b
+   data.b <- list()
+  for(k in 1:length(time.periods.b)){
+     t<- time.periods.b[k]
+     data.b[[k]] <- subset(mple.vinson,mple.vinson[,12]==t) #
+   }
+   # collapse into a matrix
+   data.b <- do.call('rbind',data.b)
+   # convert to data frame
+   data.b <- data.frame(data.b)
+   # run mple
+   mple.est.b <- glm(edgeij ~ istar2+ostar2+mutual+triangle+ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t +I(edgecov.year.diff.t^2) +
+                 nodeicov.AbsDiffMQscores+ nodeicov.NumberJusticesPro+ nodeocov.sender.time + nodeifactor.SameIssueArea.2+ nodeifactor.SameIssueArea.3+ 
+                 nodeifactor.SameIssueArea.4+nodeifactor.SameIssueArea.5+ nodeifactor.SameIssueArea.6+ nodeifactor.SameIssueArea.7+ 
+                 nodeifactor.SameIssueArea.8+nodeifactor.SameIssueArea.9+  nodeifactor.SameIssueArea.10+
+                 nodeifactor.SameIssueArea.11+ nodeifactor.SameIssueArea.12+ nodeifactor.SameIssueArea.13+nodeifactor.SameIssueArea.14+ 
+                 nodeofactor.SameIssueArea.2+ nodeofactor.SameIssueArea.3+ nodeofactor.SameIssueArea.4+nodeofactor.SameIssueArea.5+ 
+                 nodeofactor.SameIssueArea.6+nodeofactor.SameIssueArea.7+
+                 nodeofactor.SameIssueArea.8+nodeofactor.SameIssueArea.9+nodeofactor.SameIssueArea.10+ nodeofactor.SameIssueArea.11+ 
+                 nodeofactor.SameIssueArea.12+ nodeofactor.SameIssueArea.13+nodeofactor.SameIssueArea.14,family=binomial,data=data.b)
+   # store results
+   boot.results[b,] <- coef(mple.est.b)
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 101
[1] 102
[1] 103
[1] 104
[1] 105
[1] 106
[1] 107
[1] 108
[1] 109
[1] 110
[1] 111
[1] 112
[1] 113
[1] 114
[1] 115
[1] 116
[1] 117
[1] 118
[1] 119
[1] 120
[1] 121
[1] 122
[1] 123
[1] 124
[1] 125
[1] 126
[1] 127
[1] 128
[1] 129
[1] 130
[1] 131
[1] 132
[1] 133
[1] 134
[1] 135
[1] 136
[1] 137
[1] 138
[1] 139
[1] 140
[1] 141
[1] 142
[1] 143
[1] 144
[1] 145
[1] 146
[1] 147
[1] 148
[1] 149
[1] 150
[1] 151
[1] 152
[1] 153
[1] 154
[1] 155
[1] 156
[1] 157
[1] 158
[1] 159
[1] 160
[1] 161
[1] 162
[1] 163
[1] 164
[1] 165
[1] 166
[1] 167
[1] 168
[1] 169
[1] 170
[1] 171
[1] 172
[1] 173
[1] 174
[1] 175
[1] 176
[1] 177
[1] 178
[1] 179
[1] 180
[1] 181
[1] 182
[1] 183
[1] 184
[1] 185
[1] 186
[1] 187
[1] 188
[1] 189
[1] 190
[1] 191
[1] 192
[1] 193
[1] 194
[1] 195
[1] 196
[1] 197
[1] 198
[1] 199
[1] 200
[1] 201
[1] 202
[1] 203
[1] 204
[1] 205
[1] 206
[1] 207
[1] 208
[1] 209
[1] 210
[1] 211
[1] 212
[1] 213
[1] 214
[1] 215
[1] 216
[1] 217
[1] 218
[1] 219
[1] 220
[1] 221
[1] 222
[1] 223
[1] 224
[1] 225
[1] 226
[1] 227
[1] 228
[1] 229
[1] 230
[1] 231
[1] 232
[1] 233
[1] 234
[1] 235
[1] 236
[1] 237
[1] 238
[1] 239
[1] 240
[1] 241
[1] 242
[1] 243
[1] 244
[1] 245
[1] 246
[1] 247
[1] 248
[1] 249
[1] 250
[1] 251
[1] 252
[1] 253
[1] 254
[1] 255
[1] 256
[1] 257
[1] 258
[1] 259
[1] 260
[1] 261
[1] 262
[1] 263
[1] 264
[1] 265
[1] 266
[1] 267
[1] 268
[1] 269
[1] 270
[1] 271
[1] 272
[1] 273
[1] 274
[1] 275
[1] 276
[1] 277
[1] 278
[1] 279
[1] 280
[1] 281
[1] 282
[1] 283
[1] 284
[1] 285
[1] 286
[1] 287
[1] 288
[1] 289
[1] 290
[1] 291
[1] 292
[1] 293
[1] 294
[1] 295
[1] 296
[1] 297
[1] 298
[1] 299
[1] 300
[1] 301
[1] 302
[1] 303
[1] 304
[1] 305
[1] 306
[1] 307
[1] 308
[1] 309
[1] 310
[1] 311
[1] 312
[1] 313
[1] 314
[1] 315
[1] 316
[1] 317
[1] 318
[1] 319
[1] 320
[1] 321
[1] 322
[1] 323
[1] 324
[1] 325
[1] 326
[1] 327
[1] 328
[1] 329
[1] 330
[1] 331
[1] 332
[1] 333
[1] 334
[1] 335
[1] 336
[1] 337
[1] 338
[1] 339
[1] 340
[1] 341
[1] 342
[1] 343
[1] 344
[1] 345
[1] 346
[1] 347
[1] 348
[1] 349
[1] 350
[1] 351
[1] 352
[1] 353
[1] 354
[1] 355
[1] 356
[1] 357
[1] 358
[1] 359
[1] 360
[1] 361
[1] 362
[1] 363
[1] 364
[1] 365
[1] 366
[1] 367
[1] 368
[1] 369
[1] 370
[1] 371
[1] 372
[1] 373
[1] 374
[1] 375
[1] 376
[1] 377
[1] 378
[1] 379
[1] 380
[1] 381
[1] 382
[1] 383
[1] 384
[1] 385
[1] 386
[1] 387
[1] 388
[1] 389
[1] 390
[1] 391
[1] 392
[1] 393
[1] 394
[1] 395
[1] 396
[1] 397
[1] 398
[1] 399
[1] 400
[1] 401
[1] 402
[1] 403
[1] 404
[1] 405
[1] 406
[1] 407
[1] 408
[1] 409
[1] 410
[1] 411
[1] 412
[1] 413
[1] 414
[1] 415
[1] 416
[1] 417
[1] 418
[1] 419
[1] 420
[1] 421
[1] 422
[1] 423
[1] 424
[1] 425
[1] 426
[1] 427
[1] 428
[1] 429
[1] 430
[1] 431
[1] 432
[1] 433
[1] 434
[1] 435
[1] 436
[1] 437
[1] 438
[1] 439
[1] 440
[1] 441
[1] 442
[1] 443
[1] 444
[1] 445
[1] 446
[1] 447
[1] 448
[1] 449
[1] 450
[1] 451
[1] 452
[1] 453
[1] 454
[1] 455
[1] 456
[1] 457
[1] 458
[1] 459
[1] 460
[1] 461
[1] 462
[1] 463
[1] 464
[1] 465
[1] 466
[1] 467
[1] 468
[1] 469
[1] 470
[1] 471
[1] 472
[1] 473
[1] 474
[1] 475
[1] 476
[1] 477
[1] 478
[1] 479
[1] 480
[1] 481
[1] 482
[1] 483
[1] 484
[1] 485
[1] 486
[1] 487
[1] 488
[1] 489
[1] 490
[1] 491
[1] 492
[1] 493
[1] 494
[1] 495
[1] 496
[1] 497
[1] 498
[1] 499
[1] 500
> 
> write.csv(boot.results, file = "bootresults_vinson.csv")
> 
> ### take percentiles
> quantile(boot.results[,1], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
-3.487815 -4.475751 
> quantile(boot.results[,2], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
0.002985614 0.001963792 
> quantile(boot.results[,3], probs=c(0.975, 0.025), na.rm = TRUE)
       97.5%         2.5% 
0.0013957662 0.0003637634 
> quantile(boot.results[,4], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.4209438 0.2463958 
> quantile(boot.results[,5], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.1123603 0.0929441 
> quantile(boot.results[,6], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
 0.01069228 -0.00515129 
> quantile(boot.results[,7], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
0.10984976 0.09353044 
> quantile(boot.results[,8], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
-0.00742726 -0.01224187 
> 
> 
> 

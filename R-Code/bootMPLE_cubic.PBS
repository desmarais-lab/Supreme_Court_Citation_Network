#PBS -l nodes=1:ppn=1
#PBS -l walltime=70:00:00
#PBS -m abe
#PBS -M schmid@psu.edu
#PBS -l mem=128GB
#PBS -j oe


cd /storage/work/cxs5700/SCC_paper/MPLE

echo " "
echo " "
echo "Job started on `hostname` at `date`"

module load R/3.2.0

R --vanilla <<STOP > scc_bootmple_full_noW500.out

# get data
mpledata<- read.csv("mpledata_all.csv")


#install.packages("statnet", Sys.getenv("R_LIBS_USER"), repos = "http://cran.case.edu" )
#library(statnet)

# set seed
set.seed(333)

# MPLE
mple.est <- glm(edgeij ~ istar2+ostar2+mutual+triangle+ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t +edgecov.year.diff.square.t +  
                nodeicov.AbsDiffMQscores+ nodeicov.NumberJusticesPro+ nodeocov.sender.time + nodeifactor.SameIssueArea.2+ nodeifactor.SameIssueArea.3+ 
                nodeifactor.SameIssueArea.4+nodeifactor.SameIssueArea.5+ nodeifactor.SameIssueArea.6+ nodeifactor.SameIssueArea.7+ 
                nodeifactor.SameIssueArea.8+nodeifactor.SameIssueArea.9+  nodeifactor.SameIssueArea.10+
                nodeifactor.SameIssueArea.11+ nodeifactor.SameIssueArea.12+ nodeifactor.SameIssueArea.13+nodeifactor.SameIssueArea.14+ 
                nodeofactor.SameIssueArea.2+ nodeofactor.SameIssueArea.3+ nodeofactor.SameIssueArea.4+nodeofactor.SameIssueArea.5+ 
                nodeofactor.SameIssueArea.6+nodeofactor.SameIssueArea.7+
                nodeofactor.SameIssueArea.8+nodeofactor.SameIssueArea.9+nodeofactor.SameIssueArea.10+ nodeofactor.SameIssueArea.11+ 
                nodeofactor.SameIssueArea.12+ nodeofactor.SameIssueArea.13+nodeofactor.SameIssueArea.14+
                instar2_sendertime+outstar2_sendertime+ mutual_sendertime+ triangle_sendertime+mq_sendertime +sameissuearea_sendertime+
                yeardiff_sendertime + yeardiffsquare_sendertime+ AbsDiffMQscores_sendertime + NumberJusticesPro_sendertime+
                instar2_sendertime2+outstar2_sendertime2+ mutual_sendertime2+ triangle_sendertime2+mq_sendertime2 +sameissuearea_sendertime2+
                yeardiff_sendertime2 + yeardiffsquare_sendertime2+ AbsDiffMQscores_sendertime2 + NumberJusticesPro_sendertime2+
                instar2_sendertime3+outstar2_sendertime3+ mutual_sendertime3+ triangle_sendertime3+mq_sendertime3 +sameissuearea_sendertime3+
                yeardiff_sendertime3 + yeardiffsquare_sendertime3+ AbsDiffMQscores_sendertime3 + NumberJusticesPro_sendertime3,family=binomial,data=mpledata)
summary(mple.est)

colnames(mpledata)[12]

# nonparametric bootstrap resampling
nboot <- 500 # this number should be 200 or higher
ncoef <- length(coef(mple.est))
boot.results <- matrix(NA,nboot,ncoef)
# need to weight by the number of potential edges in a time period
n.per.time <- table(mpledata[,12])
# get unique sender times, over which to weight
unique.sender.times <- as.numeric(names(n.per.time))
# calculate weights for weighted resampling of times
#time.weights <- n.per.time/sum(n.per.time)

# loop over bootstrap iterations (easily paralellize)
for(b in 1:nboot){
  print(b)
  # sample time periods with replacement
  time.periods.b <- sample(unique.sender.times,length(unique.sender.times),rep=T)
  # construct the data for iteration b
  data.b <- list()
  for(k in 1:length(time.periods.b)){
   t<- time.periods.b[k]
    data.b[[k]] <- subset(mpledata,mpledata[,12]==t)
  }
  # collapse into a matrix
  data.b <- do.call('rbind',data.b)
  # convert to data frame
  data.b <- data.frame(data.b)
  # run mple
  mple.est.b <- glm(edgeij ~ istar2+ostar2+mutual+triangle+ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t +edgecov.year.diff.square.t + 
                nodeicov.AbsDiffMQscores+ nodeicov.NumberJusticesPro+ nodeocov.sender.time + nodeifactor.SameIssueArea.2+ nodeifactor.SameIssueArea.3+ 
                nodeifactor.SameIssueArea.4+nodeifactor.SameIssueArea.5+ nodeifactor.SameIssueArea.6+ nodeifactor.SameIssueArea.7+ 
                nodeifactor.SameIssueArea.8+nodeifactor.SameIssueArea.9+  nodeifactor.SameIssueArea.10+
                nodeifactor.SameIssueArea.11+ nodeifactor.SameIssueArea.12+ nodeifactor.SameIssueArea.13+nodeifactor.SameIssueArea.14+ 
                nodeofactor.SameIssueArea.2+ nodeofactor.SameIssueArea.3+ nodeofactor.SameIssueArea.4+nodeofactor.SameIssueArea.5+ 
                nodeofactor.SameIssueArea.6+nodeofactor.SameIssueArea.7+
                nodeofactor.SameIssueArea.8+nodeofactor.SameIssueArea.9+nodeofactor.SameIssueArea.10+ nodeofactor.SameIssueArea.11+ 
                nodeofactor.SameIssueArea.12+ nodeofactor.SameIssueArea.13+nodeofactor.SameIssueArea.14+
                instar2_sendertime+outstar2_sendertime+ mutual_sendertime+ triangle_sendertime+mq_sendertime +sameissuearea_sendertime+
                yeardiff_sendertime + yeardiffsquare_sendertime+ AbsDiffMQscores_sendertime + NumberJusticesPro_sendertime+
                instar2_sendertime2+outstar2_sendertime2+ mutual_sendertime2+ triangle_sendertime2+mq_sendertime2 +sameissuearea_sendertime2+
                yeardiff_sendertime2 + yeardiffsquare_sendertime2+ AbsDiffMQscores_sendertime2 + NumberJusticesPro_sendertime2+
                instar2_sendertime3+outstar2_sendertime3+ mutual_sendertime3+ triangle_sendertime3+mq_sendertime3 +sameissuearea_sendertime3+
                yeardiff_sendertime3 + yeardiffsquare_sendertime3+ AbsDiffMQscores_sendertime3 + NumberJusticesPro_sendertime3 ,family=binomial,data=data.b)
  # store results
  boot.results[b,] <- coef(mple.est.b)
}

write.csv(boot.results, file = "bootresults.csv")

### take percentiles
quantile(boot.results[,1], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,2], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,3], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,4], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,5], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,6], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,7], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,8], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,9], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,10], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,11], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,12], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,13], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,14], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,15], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,16], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,17], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,18], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,19], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,20], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,21], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,22], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,23], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,24], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,25], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,26], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,27], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,28], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,29], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,30], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,31], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,32], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,33], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,34], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,35], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,36], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,37], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,38], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,39], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,40], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,41], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,42], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,43], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,44], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,45], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,46], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,47], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,48], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,49], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,50], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,51], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,52], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,53], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,54], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,55], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,56], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,57], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,58], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,59], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,60], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,61], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,62], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,63], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,64], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,65], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,66], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,67], probs=c(0.975, 0.025), na.rm = TRUE)
quantile(boot.results[,68], probs=c(0.975, 0.025), na.rm = TRUE)

STOP
echo " "
echo "Job Ended at `date`"
echo " "
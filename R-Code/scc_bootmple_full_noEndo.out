
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # get data
> mpledata<- read.csv("mpledata_all.csv")
> 
> 
> #install.packages("statnet", Sys.getenv("R_LIBS_USER"), repos = "http://cran.case.edu" )
> #library(statnet)
> 
> # set seed
> set.seed(333)
> 
> # MPLE
> mple.est <- glm(edgeij ~ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t +edgecov.year.diff.square.t +  
+                 nodeicov.AbsDiffMQscores+ nodeicov.NumberJusticesPro+ nodeocov.sender.time + nodeifactor.SameIssueArea.2+ nodeifactor.SameIssueArea.3+ 
+                 nodeifactor.SameIssueArea.4+nodeifactor.SameIssueArea.5+ nodeifactor.SameIssueArea.6+ nodeifactor.SameIssueArea.7+ 
+                 nodeifactor.SameIssueArea.8+nodeifactor.SameIssueArea.9+  nodeifactor.SameIssueArea.10+
+                 nodeifactor.SameIssueArea.11+ nodeifactor.SameIssueArea.12+ nodeifactor.SameIssueArea.13+nodeifactor.SameIssueArea.14+ 
+                 nodeofactor.SameIssueArea.2+ nodeofactor.SameIssueArea.3+ nodeofactor.SameIssueArea.4+nodeofactor.SameIssueArea.5+ 
+                 nodeofactor.SameIssueArea.6+nodeofactor.SameIssueArea.7+
+                 nodeofactor.SameIssueArea.8+nodeofactor.SameIssueArea.9+nodeofactor.SameIssueArea.10+ nodeofactor.SameIssueArea.11+ 
+                 nodeofactor.SameIssueArea.12+ nodeofactor.SameIssueArea.13+nodeofactor.SameIssueArea.14+
+                 mq_sendertime +sameissuearea_sendertime+
+                 yeardiff_sendertime + yeardiffsquare_sendertime+ AbsDiffMQscores_sendertime + NumberJusticesPro_sendertime,family=binomial,data=mpledata)
> summary(mple.est)

Call:
glm(formula = edgeij ~ edgecov.mq.t + edgecov.same.issue.area.t + 
    edgecov.year.diff.t + edgecov.year.diff.square.t + nodeicov.AbsDiffMQscores + 
    nodeicov.NumberJusticesPro + nodeocov.sender.time + nodeifactor.SameIssueArea.2 + 
    nodeifactor.SameIssueArea.3 + nodeifactor.SameIssueArea.4 + 
    nodeifactor.SameIssueArea.5 + nodeifactor.SameIssueArea.6 + 
    nodeifactor.SameIssueArea.7 + nodeifactor.SameIssueArea.8 + 
    nodeifactor.SameIssueArea.9 + nodeifactor.SameIssueArea.10 + 
    nodeifactor.SameIssueArea.11 + nodeifactor.SameIssueArea.12 + 
    nodeifactor.SameIssueArea.13 + nodeifactor.SameIssueArea.14 + 
    nodeofactor.SameIssueArea.2 + nodeofactor.SameIssueArea.3 + 
    nodeofactor.SameIssueArea.4 + nodeofactor.SameIssueArea.5 + 
    nodeofactor.SameIssueArea.6 + nodeofactor.SameIssueArea.7 + 
    nodeofactor.SameIssueArea.8 + nodeofactor.SameIssueArea.9 + 
    nodeofactor.SameIssueArea.10 + nodeofactor.SameIssueArea.11 + 
    nodeofactor.SameIssueArea.12 + nodeofactor.SameIssueArea.13 + 
    nodeofactor.SameIssueArea.14 + mq_sendertime + sameissuearea_sendertime + 
    yeardiff_sendertime + yeardiffsquare_sendertime + AbsDiffMQscores_sendertime + 
    NumberJusticesPro_sendertime, family = binomial, data = mpledata)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.1549  -0.2284  -0.1416  -0.0916   3.7151  

Coefficients:
                               Estimate Std. Error  z value Pr(>|z|)    
(Intercept)                  -3.926e+00  3.837e-02 -102.315  < 2e-16 ***
edgecov.mq.t                  2.067e-01  1.074e-02   19.257  < 2e-16 ***
edgecov.same.issue.area.t     2.031e+00  1.891e-02  107.373  < 2e-16 ***
edgecov.year.diff.t          -4.619e-02  3.131e-03  -14.752  < 2e-16 ***
edgecov.year.diff.square.t    2.424e-03  1.031e-04   23.518  < 2e-16 ***
nodeicov.AbsDiffMQscores     -3.178e-02  5.627e-03   -5.648 1.63e-08 ***
nodeicov.NumberJusticesPro   -1.997e-01  6.867e-03  -29.079  < 2e-16 ***
nodeocov.sender.time          8.540e-04  2.943e-05   29.013  < 2e-16 ***
nodeifactor.SameIssueArea.2   1.971e-01  1.371e-02   14.378  < 2e-16 ***
nodeifactor.SameIssueArea.3   6.393e-01  1.513e-02   42.255  < 2e-16 ***
nodeifactor.SameIssueArea.4   4.068e-01  2.116e-02   19.229  < 2e-16 ***
nodeifactor.SameIssueArea.5   6.928e-01  4.092e-02   16.930  < 2e-16 ***
nodeifactor.SameIssueArea.6   4.776e-01  4.080e-02   11.706  < 2e-16 ***
nodeifactor.SameIssueArea.7   2.215e-01  1.926e-02   11.501  < 2e-16 ***
nodeifactor.SameIssueArea.8  -4.037e-01  1.367e-02  -29.529  < 2e-16 ***
nodeifactor.SameIssueArea.9  -2.682e-01  1.550e-02  -17.306  < 2e-16 ***
nodeifactor.SameIssueArea.10  2.510e-01  2.144e-02   11.708  < 2e-16 ***
nodeifactor.SameIssueArea.11 -6.449e-01  6.710e-02   -9.611  < 2e-16 ***
nodeifactor.SameIssueArea.12 -6.470e-01  2.411e-02  -26.839  < 2e-16 ***
nodeifactor.SameIssueArea.13  4.442e-01  7.855e-02    5.655 1.56e-08 ***
nodeifactor.SameIssueArea.14 -2.474e-01  7.106e-02   -3.482 0.000498 ***
nodeofactor.SameIssueArea.2   1.202e-01  1.363e-02    8.814  < 2e-16 ***
nodeofactor.SameIssueArea.3   6.467e-01  1.507e-02   42.902  < 2e-16 ***
nodeofactor.SameIssueArea.4   6.147e-01  1.984e-02   30.983  < 2e-16 ***
nodeofactor.SameIssueArea.5   9.845e-01  3.035e-02   32.434  < 2e-16 ***
nodeofactor.SameIssueArea.6   4.934e-01  3.734e-02   13.216  < 2e-16 ***
nodeofactor.SameIssueArea.7   3.008e-01  2.053e-02   14.652  < 2e-16 ***
nodeofactor.SameIssueArea.8  -2.281e-01  1.380e-02  -16.530  < 2e-16 ***
nodeofactor.SameIssueArea.9  -1.125e-01  1.530e-02   -7.355 1.92e-13 ***
nodeofactor.SameIssueArea.10  5.207e-01  1.969e-02   26.443  < 2e-16 ***
nodeofactor.SameIssueArea.11 -2.497e-01  5.582e-02   -4.473 7.70e-06 ***
nodeofactor.SameIssueArea.12 -8.314e-02  2.451e-02   -3.392 0.000693 ***
nodeofactor.SameIssueArea.13  1.029e+00  6.134e-02   16.773  < 2e-16 ***
nodeofactor.SameIssueArea.14  2.895e-01  1.235e-01    2.344 0.019068 *  
mq_sendertime                -3.523e-03  2.517e-04  -13.997  < 2e-16 ***
sameissuearea_sendertime      6.319e-03  4.509e-04   14.013  < 2e-16 ***
yeardiff_sendertime           3.311e-04  6.526e-05    5.073 3.91e-07 ***
yeardiffsquare_sendertime    -4.120e-05  1.936e-06  -21.288  < 2e-16 ***
AbsDiffMQscores_sendertime    4.049e-04  1.296e-04    3.125 0.001778 ** 
NumberJusticesPro_sendertime  3.483e-03  1.611e-04   21.624  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 814534  on 2751486  degrees of freedom
Residual deviance: 607208  on 2751447  degrees of freedom
AIC: 607288

Number of Fisher Scoring iterations: 8

> 
> colnames(mpledata)[12]
[1] "edgecov.sender.time.t"
> 
> # nonparametric bootstrap resampling
> nboot <- 200 # this number should be 200 or higher
> ncoef <- length(coef(mple.est))
> boot.results <- matrix(NA,nboot,ncoef)
> # need to weight by the number of potential edges in a time period
> n.per.time <- table(mpledata[,12])
> # get unique sender times, over which to weight
> unique.sender.times <- as.numeric(names(n.per.time))
> # calculate weights for weighted resampling of times
> #time.weights <- n.per.time/sum(n.per.time)
> 
> # loop over bootstrap iterations (easily paralellize)
> for(b in 1:nboot){
+   print(b)
+   # sample time periods with replacement
+   time.periods.b <- sample(unique.sender.times,length(unique.sender.times),rep=T)
+   # construct the data for iteration b
+   data.b <- list()
+   for(k in 1:length(time.periods.b)){
+    t<- time.periods.b[k]
+     data.b[[k]] <- subset(mpledata,mpledata[,12]==t)
+   }
+   # collapse into a matrix
+   data.b <- do.call('rbind',data.b)
+   # convert to data frame
+   data.b <- data.frame(data.b)
+   # run mple
+   mple.est.b <- glm(edgeij ~ edgecov.mq.t+ edgecov.same.issue.area.t+ edgecov.year.diff.t +edgecov.year.diff.square.t + 
+                 nodeicov.AbsDiffMQscores+ nodeicov.NumberJusticesPro+ nodeocov.sender.time + nodeifactor.SameIssueArea.2+ nodeifactor.SameIssueArea.3+ 
+                 nodeifactor.SameIssueArea.4+nodeifactor.SameIssueArea.5+ nodeifactor.SameIssueArea.6+ nodeifactor.SameIssueArea.7+ 
+                 nodeifactor.SameIssueArea.8+nodeifactor.SameIssueArea.9+  nodeifactor.SameIssueArea.10+
+                 nodeifactor.SameIssueArea.11+ nodeifactor.SameIssueArea.12+ nodeifactor.SameIssueArea.13+nodeifactor.SameIssueArea.14+ 
+                 nodeofactor.SameIssueArea.2+ nodeofactor.SameIssueArea.3+ nodeofactor.SameIssueArea.4+nodeofactor.SameIssueArea.5+ 
+                 nodeofactor.SameIssueArea.6+nodeofactor.SameIssueArea.7+
+                 nodeofactor.SameIssueArea.8+nodeofactor.SameIssueArea.9+nodeofactor.SameIssueArea.10+ nodeofactor.SameIssueArea.11+ 
+                 nodeofactor.SameIssueArea.12+ nodeofactor.SameIssueArea.13+nodeofactor.SameIssueArea.14+
+                 +mq_sendertime +sameissuearea_sendertime+
+                 yeardiff_sendertime + yeardiffsquare_sendertime+ AbsDiffMQscores_sendertime + NumberJusticesPro_sendertime ,family=binomial,data=data.b)
+   # store results
+   boot.results[b,] <- coef(mple.est.b)
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 101
[1] 102
[1] 103
[1] 104
[1] 105
[1] 106
[1] 107
[1] 108
[1] 109
[1] 110
[1] 111
[1] 112
[1] 113
[1] 114
[1] 115
[1] 116
[1] 117
[1] 118
[1] 119
[1] 120
[1] 121
[1] 122
[1] 123
[1] 124
[1] 125
[1] 126
[1] 127
[1] 128
[1] 129
[1] 130
[1] 131
[1] 132
[1] 133
[1] 134
[1] 135
[1] 136
[1] 137
[1] 138
[1] 139
[1] 140
[1] 141
[1] 142
[1] 143
[1] 144
[1] 145
[1] 146
[1] 147
[1] 148
[1] 149
[1] 150
[1] 151
[1] 152
[1] 153
[1] 154
[1] 155
[1] 156
[1] 157
[1] 158
[1] 159
[1] 160
[1] 161
[1] 162
[1] 163
[1] 164
[1] 165
[1] 166
[1] 167
[1] 168
[1] 169
[1] 170
[1] 171
[1] 172
[1] 173
[1] 174
[1] 175
[1] 176
[1] 177
[1] 178
[1] 179
[1] 180
[1] 181
[1] 182
[1] 183
[1] 184
[1] 185
[1] 186
[1] 187
[1] 188
[1] 189
[1] 190
[1] 191
[1] 192
[1] 193
[1] 194
[1] 195
[1] 196
[1] 197
[1] 198
[1] 199
[1] 200
> 
> write.csv(boot.results, file = "bootresults_noEndo.csv")
> 
> ### take percentiles
> quantile(boot.results[,1], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
-3.797120 -4.076247 
> quantile(boot.results[,2], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.2819802 0.1232302 
> quantile(boot.results[,3], probs=c(0.975, 0.025), na.rm = TRUE)
   97.5%     2.5% 
2.119575 1.959058 
> quantile(boot.results[,4], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
-0.03371853 -0.05739148 
> quantile(boot.results[,5], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
0.00277280 0.00198876 
> quantile(boot.results[,6], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
-0.01097716 -0.05230767 
> quantile(boot.results[,7], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
-0.1744707 -0.2176218 
> quantile(boot.results[,8], probs=c(0.975, 0.025), na.rm = TRUE)
       97.5%         2.5% 
0.0009745035 0.0007583316 
> quantile(boot.results[,9], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.2470752 0.1360807 
> quantile(boot.results[,10], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.7010333 0.5656681 
> quantile(boot.results[,11], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.4739788 0.3457019 
> quantile(boot.results[,12], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.8089229 0.5756118 
> quantile(boot.results[,13], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.5880691 0.3676400 
> quantile(boot.results[,14], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.2958959 0.1545218 
> quantile(boot.results[,15], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
-0.3444079 -0.4676021 
> quantile(boot.results[,16], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
-0.2084912 -0.3293823 
> quantile(boot.results[,17], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.3341705 0.1659799 
> quantile(boot.results[,18], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
-0.4496012 -0.8435386 
> quantile(boot.results[,19], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
-0.5646007 -0.7316417 
> quantile(boot.results[,20], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.6184751 0.2345376 
> quantile(boot.results[,21], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
-0.09911423 -0.41014508 
> quantile(boot.results[,22], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
0.22280980 0.03052464 
> quantile(boot.results[,23], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.7246691 0.5621062 
> quantile(boot.results[,24], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.7279431 0.5024232 
> quantile(boot.results[,25], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
1.2063506 0.7200682 
> quantile(boot.results[,26], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.7495997 0.2205367 
> quantile(boot.results[,27], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.4114481 0.1934027 
> quantile(boot.results[,28], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
-0.1380741 -0.3087924 
> quantile(boot.results[,29], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
-0.02762772 -0.18698304 
> quantile(boot.results[,30], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
0.6194456 0.4208634 
> quantile(boot.results[,31], probs=c(0.975, 0.025), na.rm = TRUE)
       97.5%         2.5% 
-0.004212153 -0.523359478 
> quantile(boot.results[,32], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
 0.0957268 -0.2202493 
> quantile(boot.results[,33], probs=c(0.975, 0.025), na.rm = TRUE)
    97.5%      2.5% 
1.3224256 0.6672927 
> quantile(boot.results[,34], probs=c(0.975, 0.025), na.rm = TRUE)
     97.5%       2.5% 
 0.6787804 -0.2418925 
> quantile(boot.results[,35], probs=c(0.975, 0.025), na.rm = TRUE)
       97.5%         2.5% 
-0.001832413 -0.005133713 
> quantile(boot.results[,36], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
0.008193355 0.004328654 
> quantile(boot.results[,37], probs=c(0.975, 0.025), na.rm = TRUE)
       97.5%         2.5% 
5.395854e-04 6.811638e-05 
> quantile(boot.results[,38], probs=c(0.975, 0.025), na.rm = TRUE)
        97.5%          2.5% 
-3.324140e-05 -4.761901e-05 
> quantile(boot.results[,39], probs=c(0.975, 0.025), na.rm = TRUE)
        97.5%          2.5% 
 8.111235e-04 -1.290648e-05 
> quantile(boot.results[,40], probs=c(0.975, 0.025), na.rm = TRUE)
      97.5%        2.5% 
0.003968647 0.002910081 
> 
> 
> 
> 

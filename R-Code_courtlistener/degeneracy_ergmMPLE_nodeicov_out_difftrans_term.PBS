#PBS -l nodes=1:ppn=1
#PBS -l walltime=48:00:00
#PBS -m abe
#PBS -M schmid@psu.edu
#PBS -l mem=128GB
#PBS -j oe


cd /storage/work/cxs5700/SCC_paper/degeneracy

echo " "
echo " "
echo "Job started on `hostname` at `date`"

module load R/3.2.0

R --vanilla <<STOP > degeneracy_ergmMPLE_nodeicov_out2.out

# get data
load(file="ERCM_MPLE_cl.RData")

install.packages("statnet", Sys.getenv("R_LIBS_USER"), repos = "http://cran.case.edu" )
library(statnet)
library(tc.ergmterms)

year.total <- scc1[,11]-1936 #-1936 => the first year 1937 is 1, 1938 is 2 aso, term column 

set.seed(12123)
sampled.years <- c(14, 24, 34, 44, 54, 64, 74)

pdf("degeneracy_nodeicov_out2.pdf" ,height=11.69,width=8.27)

for(i in 1:length(sampled.years)){
  # number of cases
  t<- sampled.years[i]
  print(t+1936)
  
  cases <- max(which(year.total==t)) # 14 corresponds to 1950
  
  # simple assignment of time periods to cases
  years <- year.total[1:cases] 
  
  # going to need a sender time matrix covariate
  sender.time <- matrix(years,length(years),length(years),byrow=F)
  year <- matrix(years, length(years),length(years),byrow=F)
  
  
   # extract the network up to time t
  AM <- adjacency.matrix[which(years <= t),which(years <= t)]
  
  net.t <- network(AM) 
  
  #calculate outdegree
  o.degree<- rowSums(AM)
  
  # fix the outdegrees of time t as 0
  last.t<- which(years==t)
  
  o.degree[last.t]<- 0
  
  # indicate outdegree and term as a node attribute
  net.t <- set.vertex.attribute(net.t,"o.degree", o.degree)
  net.t <- set.vertex.attribute(net.t,"term", years)

  
  not.fixed <- network(1*(sender.time == t))
  
  # use ergmMPLE to create data for time t
  data.t <- ergmMPLE(net.t~edges+ mutual+ nodeicov("o.degree")+ difftransties("term") +edgecov(not.fixed)) #+istar(2)+mutual+ostar(2)+triangle+
  # combine into a matrix
  data.t <- cbind(data.t[[1]],data.t[[2]], data.t[[3]])
  
  colnames(data.t)<- c("response", "edges", "mutual", "odeg" , "difftrans", "edgecov", "weight") # "istar2", "mutual", "ostar2", "triangle",
  
  # delete all cases with edgecov==0
  for(i in dim(data.t)[1]:1){
    if(data.t[i,6]==0){
      data.t<- data.t[-i,]
    }
  }
  
  
  # fitting glm
  dat<- as.data.frame(data.t)
  model <- glm(response~  mutual+ odeg+ difftrans , data=dat, family="binomial", weights=dat[,7]) #istar2+mutual+ostar2+triangle
  summary(model)
  
  # get statistics
  erg.est <- summary(net.t~edges+ mutual+nodeicov("o.degree")+ difftransties("term"))#istar(2)+mutual + ostar(2)+ triangles
  erg.est
  
  set.seed(1)
  sim <- simulate(network(cases)~edges+ mutual+ nodeicov("o.degree")+ difftransties("term"), nsim=1000, statsonly=T , coef= coef(model),   #istar(2)+mutual + ostar(2)+ triangles
                  constraints=~fixallbut(not.fixed), basis= net.t, control=control.simulate.formula(MCMC.burnin=100000, MCMC.interval=1500) )
  
  year.pdf <- t+1936
  
  
  par(mfrow=c(4,2), oma=c(0,0,2,0))
  hist(sim[,1], main="Edges")
  abline(v=erg.est[1],lwd=2,col="red")
  plot(sim[,1], main="Edges")
  abline(h=erg.est[1],lwd=2,col="red")
  
  hist(sim[,2], main="Mutual")
  abline(v=erg.est[2],lwd=2,col="red")
  plot(sim[,2], main="Mutual")
  abline(h=erg.est[2],lwd=2,col="red")
   
  hist(sim[,3], main="Nodeicov(Odegree)")
  abline(v=erg.est[3],lwd=2,col="red")
  plot(sim[,3], main="Nodeicov(Odegree)")
  abline(h=erg.est[3],lwd=2,col="red")
  
  hist(sim[,4], main="DiffTrans")
  abline(v=erg.est[4],lwd=2,col="red")
  plot(sim[,4], main="DiffTrans")
  abline(h=erg.est[4],lwd=2,col="red")
  
  
  title(paste('Degeneracy Check ', year.pdf), outer=TRUE, cex.main=3)
  
}

dev.off()


STOP
echo " "
echo "Job Ended at `date`"
echo " "
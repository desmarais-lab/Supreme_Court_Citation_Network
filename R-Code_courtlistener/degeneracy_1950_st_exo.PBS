#PBS -l nodes=1:ppn=1
#PBS -l walltime=48:00:00
#PBS -m abe
#PBS -M schmid@psu.edu
#PBS -l mem=128GB
#PBS -j oe


cd /storage/work/cxs5700/SCC_paper/MPLE_cl

echo " "
echo " "
echo "Job started on `hostname` at `date`"

module load R#/3.4.0

R --vanilla <<STOP > degeneracy_1950_st_exo.out

# get data
load(file="ERCM_MPLE_cl.RData")

library(statnet)



# id = time.periods
# number of time periods
time.periods <- 324 # 324 corresponds to 1950

cases.total<- scc1[,55] # id column
year.total <- scc1[,11]-1936 #-1936 => the first year 1937 is 1, 1938 is 2 aso, term column 

####################################################################
## calculation of MPLE
######################################################################

# number of cases
cases <- max(which(time.periods==cases.total)) # last case in time period (id): time.periods

# simple assignment of time periods to cases
case.time <- cases.total[1:cases]
years <- year.total[1:cases] 

# going to need a sender time matrix covariate
sender.time <- matrix(case.time,length(case.time),length(case.time),byrow=F)
# a receiver time covariate
receiver.time <- matrix(case.time,length(case.time),length(case.time),byrow=T)
# and a unique dyad id to prevent ergmMPLE from using weights
dyad.id <- matrix(runif(length(case.time)^2),length(case.time),length(case.time))
# year
year <- matrix(years, length(case.time),length(case.time),byrow=F)

year.diff.square<- year.diff.matrix^2



t=time.periods
# extract the network up to time t
net.t <- network(adjacency.matrix[which(case.time <= t),which(case.time <= t)])
# subset MQ matrix
mq.t <- mq.matrix[which(case.time <= t),which(case.time <= t)]
# subset same issue matrix
same.issue.area.t <- same.issue.area[which(case.time <= t),which(case.time <= t)]
# subset year diff matrix
year.diff.t <- year.diff.matrix[which(case.time <= t),which(case.time <= t)]
# subset year diff matrix square
year.diff.square.t <- year.diff.square[which(case.time <= t),which(case.time <= t)]
# subset sender time matrix
sender.time.t <- sender.time[which(case.time <= t),which(case.time <= t)]
# subset receiver time matrix
receiver.time.t <- receiver.time[which(case.time <= t),which(case.time <= t)]
# subset unique dyad id matrix
dyad.id.t <- dyad.id[which(case.time <= t),which(case.time <= t)]
# subset year matrix
year.t<- year[which(case.time <= t),which(case.time <= t)]
# subset same opinion writer matrix
same.opinion.writer.t<- same.opinion.writer[which(case.time <= t),which(case.time <= t)]

#### set vertex attributes
# same issue area
net.t <- set.vertex.attribute(net.t,"SameIssueArea", scc1[which(case.time <= t),41])
# abs diff of MQ score
net.t <- set.vertex.attribute(net.t,"AbsDiffMQscores", scc1[which(case.time <= t),65])
# number justices that voted for the case
net.t <- set.vertex.attribute(net.t,"NumberJusticesPro", scc1[which(case.time <= t),52])
# overruled covariate
net.t <- set.vertex.attribute(net.t,"Overruled", Overruled.matrix[which(case.time <= t),t])
# sender time
net.t <- set.vertex.attribute(net.t,"sender.time", sender.time.t[,1])
# Majority Opinion Writer
net.t <- set.vertex.attribute(net.t,"MajOpWriter", scc1[which(case.time <= t),49])


times.t <- case.time[which(case.time <= t)]

# adjacency matrix values are fixed if (1) sender case time < t or sender time < receiver time
# create an adjacency matrix where edge from i to j indicates that element i j of the network
# is not fixed
not.fixed <- network(1*(sender.time.t == time.periods))

# estimate
mple <-  ergm(net.t ~ edges+edgecov(mq.t)+edgecov(same.issue.area.t)+edgecov(year.diff.t)+ edgecov(year.diff.square.t )+edgecov(receiver.time.t)+
                edgecov(dyad.id.t)+ #edgecov(year.t) +('sender.time')+ 
                nodeicov('AbsDiffMQscores')+ nodeicov('NumberJusticesPro')+ #nodeifactor('SameIssueArea', base=1)+ nodeofactor('SameIssueArea', base=1)+
                #nodeicov('Overruled')+
                edgecov(same.opinion.writer.t),#+ nodeifactor('MajOpWriter')+ nodeofactor('MajOpWriter')+ nodemix('SameIssueArea'),
              estimate="MPLE",constraints=~fixallbut(not.fixed))

coeffs<- coef(mple)
coeffs

mple.obs <-  summary(net.t ~ edges+edgecov(mq.t)+edgecov(same.issue.area.t)+edgecov(year.diff.t)+ edgecov(year.diff.square.t )+edgecov(receiver.time.t)+
                edgecov(dyad.id.t)+ #edgecov(year.t) +('sender.time')+ 
                nodeicov('AbsDiffMQscores')+ nodeicov('NumberJusticesPro')+ #nodeifactor('SameIssueArea', base=1)+ nodeofactor('SameIssueArea', base=1)+
                #nodeicov('Overruled')+
                edgecov(same.opinion.writer.t))

##### simulate
sim.nets <- simulate(mple,nsim=500,constraints=~fixallbut(not.fixed))


# statistics of simulated networks
gof.results<- matrix(0, length(mple.obs), 500)
for(i in 1:500){
print(i)
  gf <- summary(sim.nets[[i]]~edges+edgecov(mq.t)+edgecov(same.issue.area.t)+edgecov(year.diff.t)+ edgecov(year.diff.square.t )+edgecov(receiver.time.t)+
                  edgecov(dyad.id.t)+ #edgecov(year.t) +('sender.time')+ 
                  nodeicov('AbsDiffMQscores')+ nodeicov('NumberJusticesPro')+ #nodeifactor('SameIssueArea', base=1)+ nodeofactor('SameIssueArea', base=1)+
                  #nodeicov('Overruled')+
                  edgecov(same.opinion.writer.t))
  gof.results[,i]<- gf
}

save(list="gof.results",file="gof_1950_exo.RData")

# plotting

print(mple.obs)


pdf("degeneracy_1950_exo.pdf",width=11.69,height=8.27)
par(mfrow=c(2,3), oma=c(0,0,2,0))
hist(gof.results[1,], main="Edges", xlab="Edges", cex.lab=1.6, cex.axis=2, cex.main=2)
abline(v=mple.obs[1], col="red", lwd=2)


hist(gof.results[2,], main="Martin Quinn Score",  xlab="Martin Quinn Score", cex.lab=1.6, cex.axis=2, cex.main=2)
abline(v=mple.obs[2], col="red", lwd=2)

hist(gof.results[3,], main="Issue Area", xlab="Issue Area", cex.lab=1.6, cex.axis=2, cex.main=2)
abline(v=mple.obs[3], col="red", lwd=2)

hist(gof.results[4,], main="Year Differene", xlab="Year Difference", cex.lab=1.6, cex.axis=2, cex.main=2)
abline(v=mple.obs[4], col="red", lwd=2)

hist(gof.results[5,], main="Year Difference Square", xlab="Year Difference Square", cex.lab=1.6, cex.axis=2, cex.main=2)
abline(v=mple.obs[5], col="red", lwd=2)

hist(gof.results[6,], main="Receiver Time", xlab="Receiver Time", cex.lab=1.6, cex.axis=2, cex.main=2)
abline(v=mple.obs[6], col="red", lwd=2)

title("Degeneracy Check 1950", outer=TRUE, cex.main=3)

dev.off()


STOP
echo " "
echo "Job Ended at `date`"
echo " "